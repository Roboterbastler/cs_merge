/* Auto-generated by genmsg_cpp for file /home/christian/cs_merge_publication/cs_merge/cs_merge_msgs/srv/getTransform.srv */
#ifndef CS_MERGE_MSGS_SERVICE_GETTRANSFORM_H
#define CS_MERGE_MSGS_SERVICE_GETTRANSFORM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"

#include "nav_msgs/OccupancyGrid.h"
#include "nav_msgs/OccupancyGrid.h"


#include "cs_merge_msgs/transform.h"

namespace cs_merge_msgs
{
template <class ContainerAllocator>
struct getTransformRequest_ {
  typedef getTransformRequest_<ContainerAllocator> Type;

  getTransformRequest_()
  : map_one()
  , map_two()
  {
  }

  getTransformRequest_(const ContainerAllocator& _alloc)
  : map_one(_alloc)
  , map_two(_alloc)
  {
  }

  typedef  ::nav_msgs::OccupancyGrid_<ContainerAllocator>  _map_one_type;
   ::nav_msgs::OccupancyGrid_<ContainerAllocator>  map_one;

  typedef  ::nav_msgs::OccupancyGrid_<ContainerAllocator>  _map_two_type;
   ::nav_msgs::OccupancyGrid_<ContainerAllocator>  map_two;


  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct getTransformRequest
typedef  ::cs_merge_msgs::getTransformRequest_<std::allocator<void> > getTransformRequest;

typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest> getTransformRequestPtr;
typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest const> getTransformRequestConstPtr;



template <class ContainerAllocator>
struct getTransformResponse_ {
  typedef getTransformResponse_<ContainerAllocator> Type;

  getTransformResponse_()
  : result()
  {
  }

  getTransformResponse_(const ContainerAllocator& _alloc)
  : result(_alloc)
  {
  }

  typedef  ::cs_merge_msgs::transform_<ContainerAllocator>  _result_type;
   ::cs_merge_msgs::transform_<ContainerAllocator>  result;


  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct getTransformResponse
typedef  ::cs_merge_msgs::getTransformResponse_<std::allocator<void> > getTransformResponse;

typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse> getTransformResponsePtr;
typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse const> getTransformResponseConstPtr;


struct getTransform
{

typedef getTransformRequest Request;
typedef getTransformResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct getTransform
} // namespace cs_merge_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "ada89033b0dcc741eab33caf37ae322e";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0xada89033b0dcc741ULL;
  static const uint64_t static_value2 = 0xeab33caf37ae322eULL;
};

template<class ContainerAllocator>
struct DataType< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransformRequest";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
nav_msgs/OccupancyGrid map_one\n\
nav_msgs/OccupancyGrid map_two\n\
\n\
================================================================================\n\
MSG: nav_msgs/OccupancyGrid\n\
# This represents a 2-D grid map, in which each cell represents the probability of\n\
# occupancy.\n\
\n\
Header header \n\
\n\
#MetaData for the map\n\
MapMetaData info\n\
\n\
# The map data, in row-major order, starting with (0,0).  Occupancy\n\
# probabilities are in the range [0,100].  Unknown is -1.\n\
int8[] data\n\
\n\
================================================================================\n\
MSG: std_msgs/Header\n\
# Standard metadata for higher-level stamped data types.\n\
# This is generally used to communicate timestamped data \n\
# in a particular coordinate frame.\n\
# \n\
# sequence ID: consecutively increasing ID \n\
uint32 seq\n\
#Two-integer timestamp that is expressed as:\n\
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')\n\
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')\n\
# time-handling sugar is provided by the client library\n\
time stamp\n\
#Frame this data is associated with\n\
# 0: no frame\n\
# 1: global frame\n\
string frame_id\n\
\n\
================================================================================\n\
MSG: nav_msgs/MapMetaData\n\
# This hold basic information about the characterists of the OccupancyGrid\n\
\n\
# The time at which the map was loaded\n\
time map_load_time\n\
# The map resolution [m/cell]\n\
float32 resolution\n\
# Map width [cells]\n\
uint32 width\n\
# Map height [cells]\n\
uint32 height\n\
# The origin of the map [m, m, rad].  This is the real-world pose of the\n\
# cell (0,0) in the map.\n\
geometry_msgs/Pose origin\n\
================================================================================\n\
MSG: geometry_msgs/Pose\n\
# A representation of pose in free space, composed of postion and orientation. \n\
Point position\n\
Quaternion orientation\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Point\n\
# This contains the position of a point in free space\n\
float64 x\n\
float64 y\n\
float64 z\n\
\n\
================================================================================\n\
MSG: geometry_msgs/Quaternion\n\
# This represents an orientation in free space in quaternion form.\n\
\n\
float64 x\n\
float64 y\n\
float64 z\n\
float64 w\n\
\n\
";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b6ef843ea74b64aaef6e5bec56fc360";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2b6ef843ea74b64aULL;
  static const uint64_t static_value2 = 0xaef6e5bec56fc360ULL;
};

template<class ContainerAllocator>
struct DataType< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransformResponse";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
cs_merge_msgs/transform result\n\
\n\
\n\
================================================================================\n\
MSG: cs_merge_msgs/transform\n\
time stamp\n\
float64 rotation\n\
float64 dx\n\
float64 dy\n\
\n\
";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.map_one);
    stream.next(m.map_two);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getTransformRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getTransformResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cs_merge_msgs::getTransform> {
  static const char* value() 
  {
    return "33cf49a04ac4ccb9206baa236692fb49";
  }

  static const char* value(const cs_merge_msgs::getTransform&) { return value(); } 
};

template<>
struct DataType<cs_merge_msgs::getTransform> {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransform";
  }

  static const char* value(const cs_merge_msgs::getTransform&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "33cf49a04ac4ccb9206baa236692fb49";
  }

  static const char* value(const cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransform";
  }

  static const char* value(const cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "33cf49a04ac4ccb9206baa236692fb49";
  }

  static const char* value(const cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransform";
  }

  static const char* value(const cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CS_MERGE_MSGS_SERVICE_GETTRANSFORM_H

