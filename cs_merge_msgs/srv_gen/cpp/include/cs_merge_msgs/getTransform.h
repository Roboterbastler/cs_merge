/* Auto-generated by genmsg_cpp for file /home/christian/cs_merge_publication/cs_merge/cs_merge_msgs/srv/getTransform.srv */
#ifndef CS_MERGE_MSGS_SERVICE_GETTRANSFORM_H
#define CS_MERGE_MSGS_SERVICE_GETTRANSFORM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"

#include "ros/service_traits.h"



#include "cs_merge_msgs/transform.h"

namespace cs_merge_msgs
{
template <class ContainerAllocator>
struct getTransformRequest_ {
  typedef getTransformRequest_<ContainerAllocator> Type;

  getTransformRequest_()
  : topic_map_one()
  , topic_map_two()
  {
  }

  getTransformRequest_(const ContainerAllocator& _alloc)
  : topic_map_one(_alloc)
  , topic_map_two(_alloc)
  {
  }

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_map_one_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topic_map_one;

  typedef std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  _topic_map_two_type;
  std::basic_string<char, std::char_traits<char>, typename ContainerAllocator::template rebind<char>::other >  topic_map_two;


  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator>  const> ConstPtr;
}; // struct getTransformRequest
typedef  ::cs_merge_msgs::getTransformRequest_<std::allocator<void> > getTransformRequest;

typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest> getTransformRequestPtr;
typedef boost::shared_ptr< ::cs_merge_msgs::getTransformRequest const> getTransformRequestConstPtr;



template <class ContainerAllocator>
struct getTransformResponse_ {
  typedef getTransformResponse_<ContainerAllocator> Type;

  getTransformResponse_()
  : result()
  {
  }

  getTransformResponse_(const ContainerAllocator& _alloc)
  : result(_alloc)
  {
  }

  typedef  ::cs_merge_msgs::transform_<ContainerAllocator>  _result_type;
   ::cs_merge_msgs::transform_<ContainerAllocator>  result;


  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator>  const> ConstPtr;
}; // struct getTransformResponse
typedef  ::cs_merge_msgs::getTransformResponse_<std::allocator<void> > getTransformResponse;

typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse> getTransformResponsePtr;
typedef boost::shared_ptr< ::cs_merge_msgs::getTransformResponse const> getTransformResponseConstPtr;


struct getTransform
{

typedef getTransformRequest Request;
typedef getTransformResponse Response;
Request request;
Response response;

typedef Request RequestType;
typedef Response ResponseType;
}; // struct getTransform
} // namespace cs_merge_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "4dde61cc12adda5723edb461ea239cf4";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x4dde61cc12adda57ULL;
  static const uint64_t static_value2 = 0x23edb461ea239cf4ULL;
};

template<class ContainerAllocator>
struct DataType< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransformRequest";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
string topic_map_one\n\
string topic_map_two\n\
\n\
";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

} // namespace message_traits
} // namespace ros


namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "2b6ef843ea74b64aaef6e5bec56fc360";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x2b6ef843ea74b64aULL;
  static const uint64_t static_value2 = 0xaef6e5bec56fc360ULL;
};

template<class ContainerAllocator>
struct DataType< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransformResponse";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "\n\
cs_merge_msgs/transform result\n\
\n\
\n\
================================================================================\n\
MSG: cs_merge_msgs/transform\n\
time stamp\n\
float64 rotation\n\
float64 dx\n\
float64 dy\n\
\n\
";
  }

  static const char* value(const  ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cs_merge_msgs::getTransformRequest_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.topic_map_one);
    stream.next(m.topic_map_two);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getTransformRequest_
} // namespace serialization
} // namespace ros


namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cs_merge_msgs::getTransformResponse_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.result);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct getTransformResponse_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace service_traits
{
template<>
struct MD5Sum<cs_merge_msgs::getTransform> {
  static const char* value() 
  {
    return "972de1e3b8810d34e2aa284314fffb13";
  }

  static const char* value(const cs_merge_msgs::getTransform&) { return value(); } 
};

template<>
struct DataType<cs_merge_msgs::getTransform> {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransform";
  }

  static const char* value(const cs_merge_msgs::getTransform&) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "972de1e3b8810d34e2aa284314fffb13";
  }

  static const char* value(const cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cs_merge_msgs::getTransformRequest_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransform";
  }

  static const char* value(const cs_merge_msgs::getTransformRequest_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct MD5Sum<cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "972de1e3b8810d34e2aa284314fffb13";
  }

  static const char* value(const cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct DataType<cs_merge_msgs::getTransformResponse_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/getTransform";
  }

  static const char* value(const cs_merge_msgs::getTransformResponse_<ContainerAllocator> &) { return value(); } 
};

} // namespace service_traits
} // namespace ros

#endif // CS_MERGE_MSGS_SERVICE_GETTRANSFORM_H

