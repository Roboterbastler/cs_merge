/* Auto-generated by genmsg_cpp for file /home/christian/cs_merge_publication/cs_merge/cs_merge_msgs/msg/transform.msg */
#ifndef CS_MERGE_MSGS_MESSAGE_TRANSFORM_H
#define CS_MERGE_MSGS_MESSAGE_TRANSFORM_H
#include <string>
#include <vector>
#include <map>
#include <ostream>
#include "ros/serialization.h"
#include "ros/builtin_message_traits.h"
#include "ros/message_operations.h"
#include "ros/time.h"

#include "ros/macros.h"

#include "ros/assert.h"


namespace cs_merge_msgs
{
template <class ContainerAllocator>
struct transform_ {
  typedef transform_<ContainerAllocator> Type;

  transform_()
  : stamp()
  , rotation(0.0)
  , dx(0.0)
  , dy(0.0)
  {
  }

  transform_(const ContainerAllocator& _alloc)
  : stamp()
  , rotation(0.0)
  , dx(0.0)
  , dy(0.0)
  {
  }

  typedef ros::Time _stamp_type;
  ros::Time stamp;

  typedef double _rotation_type;
  double rotation;

  typedef double _dx_type;
  double dx;

  typedef double _dy_type;
  double dy;


  typedef boost::shared_ptr< ::cs_merge_msgs::transform_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::cs_merge_msgs::transform_<ContainerAllocator>  const> ConstPtr;
}; // struct transform
typedef  ::cs_merge_msgs::transform_<std::allocator<void> > transform;

typedef boost::shared_ptr< ::cs_merge_msgs::transform> transformPtr;
typedef boost::shared_ptr< ::cs_merge_msgs::transform const> transformConstPtr;


template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const  ::cs_merge_msgs::transform_<ContainerAllocator> & v)
{
  ros::message_operations::Printer< ::cs_merge_msgs::transform_<ContainerAllocator> >::stream(s, "", v);
  return s;}

} // namespace cs_merge_msgs

namespace ros
{
namespace message_traits
{
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::transform_<ContainerAllocator> > : public TrueType {};
template<class ContainerAllocator> struct IsMessage< ::cs_merge_msgs::transform_<ContainerAllocator>  const> : public TrueType {};
template<class ContainerAllocator>
struct MD5Sum< ::cs_merge_msgs::transform_<ContainerAllocator> > {
  static const char* value() 
  {
    return "22c5a99ab114b47cb5a4960d2baeb507";
  }

  static const char* value(const  ::cs_merge_msgs::transform_<ContainerAllocator> &) { return value(); } 
  static const uint64_t static_value1 = 0x22c5a99ab114b47cULL;
  static const uint64_t static_value2 = 0xb5a4960d2baeb507ULL;
};

template<class ContainerAllocator>
struct DataType< ::cs_merge_msgs::transform_<ContainerAllocator> > {
  static const char* value() 
  {
    return "cs_merge_msgs/transform";
  }

  static const char* value(const  ::cs_merge_msgs::transform_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator>
struct Definition< ::cs_merge_msgs::transform_<ContainerAllocator> > {
  static const char* value() 
  {
    return "time stamp\n\
float64 rotation\n\
float64 dx\n\
float64 dy\n\
\n\
";
  }

  static const char* value(const  ::cs_merge_msgs::transform_<ContainerAllocator> &) { return value(); } 
};

template<class ContainerAllocator> struct IsFixedSize< ::cs_merge_msgs::transform_<ContainerAllocator> > : public TrueType {};
} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

template<class ContainerAllocator> struct Serializer< ::cs_merge_msgs::transform_<ContainerAllocator> >
{
  template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
  {
    stream.next(m.stamp);
    stream.next(m.rotation);
    stream.next(m.dx);
    stream.next(m.dy);
  }

  ROS_DECLARE_ALLINONE_SERIALIZER;
}; // struct transform_
} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::cs_merge_msgs::transform_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const  ::cs_merge_msgs::transform_<ContainerAllocator> & v) 
  {
    s << indent << "stamp: ";
    Printer<ros::Time>::stream(s, indent + "  ", v.stamp);
    s << indent << "rotation: ";
    Printer<double>::stream(s, indent + "  ", v.rotation);
    s << indent << "dx: ";
    Printer<double>::stream(s, indent + "  ", v.dx);
    s << indent << "dy: ";
    Printer<double>::stream(s, indent + "  ", v.dy);
  }
};


} // namespace message_operations
} // namespace ros

#endif // CS_MERGE_MSGS_MESSAGE_TRANSFORM_H

