"""autogenerated by genpy from cs_merge_msgs/getTransformRequest.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import geometry_msgs.msg
import nav_msgs.msg
import genpy
import std_msgs.msg

class getTransformRequest(genpy.Message):
  _md5sum = "ada89033b0dcc741eab33caf37ae322e"
  _type = "cs_merge_msgs/getTransformRequest"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
nav_msgs/OccupancyGrid map_one
nav_msgs/OccupancyGrid map_two

================================================================================
MSG: nav_msgs/OccupancyGrid
# This represents a 2-D grid map, in which each cell represents the probability of
# occupancy.

Header header 

#MetaData for the map
MapMetaData info

# The map data, in row-major order, starting with (0,0).  Occupancy
# probabilities are in the range [0,100].  Unknown is -1.
int8[] data

================================================================================
MSG: std_msgs/Header
# Standard metadata for higher-level stamped data types.
# This is generally used to communicate timestamped data 
# in a particular coordinate frame.
# 
# sequence ID: consecutively increasing ID 
uint32 seq
#Two-integer timestamp that is expressed as:
# * stamp.sec: seconds (stamp_secs) since epoch (in Python the variable is called 'secs')
# * stamp.nsec: nanoseconds since stamp_secs (in Python the variable is called 'nsecs')
# time-handling sugar is provided by the client library
time stamp
#Frame this data is associated with
# 0: no frame
# 1: global frame
string frame_id

================================================================================
MSG: nav_msgs/MapMetaData
# This hold basic information about the characterists of the OccupancyGrid

# The time at which the map was loaded
time map_load_time
# The map resolution [m/cell]
float32 resolution
# Map width [cells]
uint32 width
# Map height [cells]
uint32 height
# The origin of the map [m, m, rad].  This is the real-world pose of the
# cell (0,0) in the map.
geometry_msgs/Pose origin
================================================================================
MSG: geometry_msgs/Pose
# A representation of pose in free space, composed of postion and orientation. 
Point position
Quaternion orientation

================================================================================
MSG: geometry_msgs/Point
# This contains the position of a point in free space
float64 x
float64 y
float64 z

================================================================================
MSG: geometry_msgs/Quaternion
# This represents an orientation in free space in quaternion form.

float64 x
float64 y
float64 z
float64 w

"""
  __slots__ = ['map_one','map_two']
  _slot_types = ['nav_msgs/OccupancyGrid','nav_msgs/OccupancyGrid']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       map_one,map_two

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getTransformRequest, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.map_one is None:
        self.map_one = nav_msgs.msg.OccupancyGrid()
      if self.map_two is None:
        self.map_two = nav_msgs.msg.OccupancyGrid()
    else:
      self.map_one = nav_msgs.msg.OccupancyGrid()
      self.map_two = nav_msgs.msg.OccupancyGrid()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.map_one.header.seq, _x.map_one.header.stamp.secs, _x.map_one.header.stamp.nsecs))
      _x = self.map_one.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If2I7d.pack(_x.map_one.info.map_load_time.secs, _x.map_one.info.map_load_time.nsecs, _x.map_one.info.resolution, _x.map_one.info.width, _x.map_one.info.height, _x.map_one.info.origin.position.x, _x.map_one.info.origin.position.y, _x.map_one.info.origin.position.z, _x.map_one.info.origin.orientation.x, _x.map_one.info.origin.orientation.y, _x.map_one.info.origin.orientation.z, _x.map_one.info.origin.orientation.w))
      length = len(self.map_one.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.map_one.data))
      _x = self
      buff.write(_struct_3I.pack(_x.map_two.header.seq, _x.map_two.header.stamp.secs, _x.map_two.header.stamp.nsecs))
      _x = self.map_two.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If2I7d.pack(_x.map_two.info.map_load_time.secs, _x.map_two.info.map_load_time.nsecs, _x.map_two.info.resolution, _x.map_two.info.width, _x.map_two.info.height, _x.map_two.info.origin.position.x, _x.map_two.info.origin.position.y, _x.map_two.info.origin.position.z, _x.map_two.info.origin.orientation.x, _x.map_two.info.origin.orientation.y, _x.map_two.info.origin.orientation.z, _x.map_two.info.origin.orientation.w))
      length = len(self.map_two.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(struct.pack(pattern, *self.map_two.data))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.map_one is None:
        self.map_one = nav_msgs.msg.OccupancyGrid()
      if self.map_two is None:
        self.map_two = nav_msgs.msg.OccupancyGrid()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.map_one.header.seq, _x.map_one.header.stamp.secs, _x.map_one.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_one.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map_one.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.map_one.info.map_load_time.secs, _x.map_one.info.map_load_time.nsecs, _x.map_one.info.resolution, _x.map_one.info.width, _x.map_one.info.height, _x.map_one.info.origin.position.x, _x.map_one.info.origin.position.y, _x.map_one.info.origin.position.z, _x.map_one.info.origin.orientation.x, _x.map_one.info.origin.orientation.y, _x.map_one.info.origin.orientation.z, _x.map_one.info.origin.orientation.w,) = _struct_2If2I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.map_one.data = struct.unpack(pattern, str[start:end])
      _x = self
      start = end
      end += 12
      (_x.map_two.header.seq, _x.map_two.header.stamp.secs, _x.map_two.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_two.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map_two.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.map_two.info.map_load_time.secs, _x.map_two.info.map_load_time.nsecs, _x.map_two.info.resolution, _x.map_two.info.width, _x.map_two.info.height, _x.map_two.info.origin.position.x, _x.map_two.info.origin.position.y, _x.map_two.info.origin.position.z, _x.map_two.info.origin.orientation.x, _x.map_two.info.origin.orientation.y, _x.map_two.info.origin.orientation.z, _x.map_two.info.origin.orientation.w,) = _struct_2If2I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.map_two.data = struct.unpack(pattern, str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_3I.pack(_x.map_one.header.seq, _x.map_one.header.stamp.secs, _x.map_one.header.stamp.nsecs))
      _x = self.map_one.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If2I7d.pack(_x.map_one.info.map_load_time.secs, _x.map_one.info.map_load_time.nsecs, _x.map_one.info.resolution, _x.map_one.info.width, _x.map_one.info.height, _x.map_one.info.origin.position.x, _x.map_one.info.origin.position.y, _x.map_one.info.origin.position.z, _x.map_one.info.origin.orientation.x, _x.map_one.info.origin.orientation.y, _x.map_one.info.origin.orientation.z, _x.map_one.info.origin.orientation.w))
      length = len(self.map_one.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.map_one.data.tostring())
      _x = self
      buff.write(_struct_3I.pack(_x.map_two.header.seq, _x.map_two.header.stamp.secs, _x.map_two.header.stamp.nsecs))
      _x = self.map_two.header.frame_id
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      if python3:
        buff.write(struct.pack('<I%sB'%length, length, *_x))
      else:
        buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_2If2I7d.pack(_x.map_two.info.map_load_time.secs, _x.map_two.info.map_load_time.nsecs, _x.map_two.info.resolution, _x.map_two.info.width, _x.map_two.info.height, _x.map_two.info.origin.position.x, _x.map_two.info.origin.position.y, _x.map_two.info.origin.position.z, _x.map_two.info.origin.orientation.x, _x.map_two.info.origin.orientation.y, _x.map_two.info.origin.orientation.z, _x.map_two.info.origin.orientation.w))
      length = len(self.map_two.data)
      buff.write(_struct_I.pack(length))
      pattern = '<%sb'%length
      buff.write(self.map_two.data.tostring())
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.map_one is None:
        self.map_one = nav_msgs.msg.OccupancyGrid()
      if self.map_two is None:
        self.map_two = nav_msgs.msg.OccupancyGrid()
      end = 0
      _x = self
      start = end
      end += 12
      (_x.map_one.header.seq, _x.map_one.header.stamp.secs, _x.map_one.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_one.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map_one.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.map_one.info.map_load_time.secs, _x.map_one.info.map_load_time.nsecs, _x.map_one.info.resolution, _x.map_one.info.width, _x.map_one.info.height, _x.map_one.info.origin.position.x, _x.map_one.info.origin.position.y, _x.map_one.info.origin.position.z, _x.map_one.info.origin.orientation.x, _x.map_one.info.origin.orientation.y, _x.map_one.info.origin.orientation.z, _x.map_one.info.origin.orientation.w,) = _struct_2If2I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.map_one.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      _x = self
      start = end
      end += 12
      (_x.map_two.header.seq, _x.map_two.header.stamp.secs, _x.map_two.header.stamp.nsecs,) = _struct_3I.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.map_two.header.frame_id = str[start:end].decode('utf-8')
      else:
        self.map_two.header.frame_id = str[start:end]
      _x = self
      start = end
      end += 76
      (_x.map_two.info.map_load_time.secs, _x.map_two.info.map_load_time.nsecs, _x.map_two.info.resolution, _x.map_two.info.width, _x.map_two.info.height, _x.map_two.info.origin.position.x, _x.map_two.info.origin.position.y, _x.map_two.info.origin.position.z, _x.map_two.info.origin.orientation.x, _x.map_two.info.origin.orientation.y, _x.map_two.info.origin.orientation.z, _x.map_two.info.origin.orientation.w,) = _struct_2If2I7d.unpack(str[start:end])
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      pattern = '<%sb'%length
      start = end
      end += struct.calcsize(pattern)
      self.map_two.data = numpy.frombuffer(str[start:end], dtype=numpy.int8, count=length)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_3I = struct.Struct("<3I")
_struct_2If2I7d = struct.Struct("<2If2I7d")
"""autogenerated by genpy from cs_merge_msgs/getTransformResponse.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct

import cs_merge_msgs.msg
import genpy

class getTransformResponse(genpy.Message):
  _md5sum = "2b6ef843ea74b64aaef6e5bec56fc360"
  _type = "cs_merge_msgs/getTransformResponse"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """
cs_merge_msgs/transform result


================================================================================
MSG: cs_merge_msgs/transform
time stamp
float64 rotation
float64 dx
float64 dy

"""
  __slots__ = ['result']
  _slot_types = ['cs_merge_msgs/transform']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       result

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(getTransformResponse, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.result is None:
        self.result = cs_merge_msgs.msg.transform()
    else:
      self.result = cs_merge_msgs.msg.transform()

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_struct_2I3d.pack(_x.result.stamp.secs, _x.result.stamp.nsecs, _x.result.rotation, _x.result.dx, _x.result.dy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      if self.result is None:
        self.result = cs_merge_msgs.msg.transform()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.result.stamp.secs, _x.result.stamp.nsecs, _x.result.rotation, _x.result.dx, _x.result.dy,) = _struct_2I3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_struct_2I3d.pack(_x.result.stamp.secs, _x.result.stamp.nsecs, _x.result.rotation, _x.result.dx, _x.result.dy))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      if self.result is None:
        self.result = cs_merge_msgs.msg.transform()
      end = 0
      _x = self
      start = end
      end += 32
      (_x.result.stamp.secs, _x.result.stamp.nsecs, _x.result.rotation, _x.result.dx, _x.result.dy,) = _struct_2I3d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_2I3d = struct.Struct("<2I3d")
class getTransform(object):
  _type          = 'cs_merge_msgs/getTransform'
  _md5sum = '33cf49a04ac4ccb9206baa236692fb49'
  _request_class  = getTransformRequest
  _response_class = getTransformResponse
