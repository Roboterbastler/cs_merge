"""autogenerated by genpy from cs_merge_controller/transform.msg. Do not edit."""
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class transform(genpy.Message):
  _md5sum = "b8b74d16604fce8d495848ba2bbc00e8"
  _type = "cs_merge_controller/transform"
  _has_header = False #flag to mark the presence of a Header object
  _full_text = """string agent_one
string agent_two
float64 rotationx
float64 rotationy
float64 angle
float64 referencex
float64 referencey
float64 evaluation

"""
  __slots__ = ['agent_one','agent_two','rotationx','rotationy','angle','referencex','referencey','evaluation']
  _slot_types = ['string','string','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       agent_one,agent_two,rotationx,rotationy,angle,referencex,referencey,evaluation

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(transform, self).__init__(*args, **kwds)
      #message fields cannot be None, assign default values for those that are
      if self.agent_one is None:
        self.agent_one = ''
      if self.agent_two is None:
        self.agent_two = ''
      if self.rotationx is None:
        self.rotationx = 0.
      if self.rotationy is None:
        self.rotationy = 0.
      if self.angle is None:
        self.angle = 0.
      if self.referencex is None:
        self.referencex = 0.
      if self.referencey is None:
        self.referencey = 0.
      if self.evaluation is None:
        self.evaluation = 0.
    else:
      self.agent_one = ''
      self.agent_two = ''
      self.rotationx = 0.
      self.rotationy = 0.
      self.angle = 0.
      self.referencex = 0.
      self.referencey = 0.
      self.evaluation = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self.agent_one
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agent_two
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.rotationx, _x.rotationy, _x.angle, _x.referencex, _x.referencey, _x.evaluation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_one = str[start:end].decode('utf-8')
      else:
        self.agent_one = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_two = str[start:end].decode('utf-8')
      else:
        self.agent_two = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.rotationx, _x.rotationy, _x.angle, _x.referencex, _x.referencey, _x.evaluation,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self.agent_one
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self.agent_two
      length = len(_x)
      if python3 or type(_x) == unicode:
        _x = _x.encode('utf-8')
        length = len(_x)
      buff.write(struct.pack('<I%ss'%length, length, _x))
      _x = self
      buff.write(_struct_6d.pack(_x.rotationx, _x.rotationy, _x.angle, _x.referencex, _x.referencey, _x.evaluation))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(_x))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(_x))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    try:
      end = 0
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_one = str[start:end].decode('utf-8')
      else:
        self.agent_one = str[start:end]
      start = end
      end += 4
      (length,) = _struct_I.unpack(str[start:end])
      start = end
      end += length
      if python3:
        self.agent_two = str[start:end].decode('utf-8')
      else:
        self.agent_two = str[start:end]
      _x = self
      start = end
      end += 48
      (_x.rotationx, _x.rotationy, _x.angle, _x.referencex, _x.referencey, _x.evaluation,) = _struct_6d.unpack(str[start:end])
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e) #most likely buffer underfill

_struct_I = genpy.struct_I
_struct_6d = struct.Struct("<6d")
